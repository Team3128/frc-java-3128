package org.team3128.autonomous.commands.scorers;

import org.team3128.autonomous.commands.CmdLambda;
import org.team3128.autonomous.commands.CmdMoveUltrasonic;
import org.team3128.autonomous.commands.defencecrossers.StrongholdStartingPosition;
import org.team3128.main.MainUnladenSwallow;
import org.team3128.util.Direction;
import org.team3128.util.PIDConstants;
import org.team3128.util.units.Length;

import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 * try to score the boulder in auto using encoder-based movement
 * @author Jamie
 *
 */
public class CmdScoreUltrasonic extends CommandGroup 
{
	MainUnladenSwallow robot;

	public CmdScoreUltrasonic(MainUnladenSwallow robot, StrongholdStartingPosition startingPosition)
	{
		this.robot = robot;
				 
		PIDConstants ultrasonicPIDConstants = new PIDConstants(.0016, .0006, .0018);
		 switch(startingPosition)
		 {
		 case FAR_LEFT:
			 addSequential(new CmdMoveUltrasonic(robot.ultrasonic, robot.drive, 5 * Length.ft, 10 * Length.cm, ultrasonicPIDConstants, 7000));
			 addSequential(robot.drive.new CmdInPlaceTurn(60, 3000, Direction.RIGHT));
			 addSequential(robot.drive.new CmdMoveForward(11  * Length.ft, 0, .6), 3000);
			 addSequential(robot.new CmdMoveRollers(3000,true));
			 break;
//		 case CENTER_LEFT:
//			 addSequential(robot.drive.new CmdMoveForward(250 * Length.cm, 5000, .3));
//			 addSequential(robot.drive.new CmdInPlaceTurn(45, 2000, Direction.RIGHT));
//			 addSequential(robot.drive.new CmdMoveForward(75 * Length.cm, 2000, .4));
//			 break;
//		 case MIDDLE:
//			 addSequential(robot.drive.new CmdInPlaceTurn(30, 2000, Direction.LEFT));
//			 addSequential(robot.drive.new CmdMoveForward(300 * Length.cm, 5000, .3));
//			 addSequential(robot.drive.new CmdInPlaceTurn(75, 3000, Direction.RIGHT));
//			 addSequential(robot.drive.new CmdMoveForward(100 * Length.cm, 2000, .4));
//			 break;
//		 case CENTER_RIGHT:
//			 addSequential(robot.drive.new CmdInPlaceTurn(30, 2000, Direction.RIGHT));
//			 addSequential(robot.drive.new CmdMoveForward(350 * Length.cm, 5000, .3));
//			 addSequential(robot.drive.new CmdInPlaceTurn(75, 3000, Direction.LEFT));
//			 addSequential(robot.drive.new CmdMoveForward(100 * Length.cm, 2000, .4));
//			 break;
//		 case FAR_RIGHT:
//			 addSequential(robot.drive.new CmdMoveForward(300 * Length.cm, 5000, .3));
//			 addSequential(robot.drive.new CmdInPlaceTurn(45, 2000, Direction.RIGHT));
//			 addSequential(robot.drive.new CmdMoveForward(50 * Length.cm, 2000, .4));
//			 break;
		 }
		 
		 addSequential(new CmdLambda(() -> {
			 robot.innerRoller.setTarget(-1);
			 robot.intakeSpinner.setTarget(MainUnladenSwallow.IntakeState.OUTTAKE.motorPower);
			 
			 try {
				Thread.sleep(2000);
			} 
			 catch (Exception e)
			 {
				e.printStackTrace();
			}
			 
			 robot.innerRoller.setTarget(0);
			 robot.intakeSpinner.setTarget(MainUnladenSwallow.IntakeState.STOPPED.motorPower);
		 }));
	}



}
