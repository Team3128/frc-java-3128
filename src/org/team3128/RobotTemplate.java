package org.team3128;

import java.util.ArrayList;

import org.team3128.listener.ListenerManager;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Scheduler;

/*
 * THIS FILE SHOULD NOT BE MODIFIED
 * --------------------------------
 * It serves as a link to the Global class
 * Events triggered here will be forwarded to the Global class
 *
 * Do not call these functions under any circumstances. Do not modify this
 * class under any circumstances.
 *
 * AUTOGENERATED. DO NOT EDIT UNDER PENALTY OF 42.
 *
 * THIS FILE IS YOUR SOUL.
 */

public class RobotTemplate extends IterativeRobot 
{
	Global global;
	ArrayList<ListenerManager> _listenerManagers = new ArrayList<ListenerManager>();
	
    public void robotInit()
    {
        Log.info("Global", "Welcome to the FRC Team 3128 No-Longer-Event System version 3!");
        Log.info("Global", "Initializing Robot...");
        global = new Global();
        
        global.initializeRobot(this);
        
        Log.info("Global", "Initialization Done!");
        Log.info("Global", "\"The Clawwwwwww.....\"   Activated");
    }

    public void disabledInit()
    {
    	global.initializeDisabled();
    }
    
    public void addListenerManagerToTick(ListenerManager manager)
    {
    	_listenerManagers.add(manager);
    }
    
    private void resetListeners()
    {
    	for(ListenerManager manager : _listenerManagers)
    	{
    		manager.removeAllListeners();
    	}
    }

    // ARE YOU CHANGING THINGS?
    public void autonomousInit()
    {
        Log.info("Global", "Initializing Autonomous...");
        resetListeners();
        global.initializeAuto();
        Log.info("Global", "Auto Initialization Done!");
    }
   
    // TURN BACK NOW.
    // YOUR CHANGES ARE NOT WANTED HERE.
   
    public void teleopInit()
    {
        Log.info("Global", "Initializing Teleop...");
    	resetListeners();
        global.initializeTeleop();
        Log.info("Global", "Teleop Initialization Done!");
    }
   
    public void disabledPeriodic()
    {
        try
		{
			Thread.sleep(100);
		}
        catch (InterruptedException e)
		{
			return;
		}
    }

    // YOU'D BETTER NOT CHANGE ANYTHING
   
    public void autonomousPeriodic()
    {   
		Scheduler.getInstance().run();
    }

    // DO YOU REALLY WANT TO MODIFY YOUR SOUL?
   
    public void teleopPeriodic()
    {        
    	for(ListenerManager manager : _listenerManagers)
    	{
    		manager.tick();
    	}
        
        try
		{
			Thread.sleep(20);
		}
        catch (InterruptedException e)
		{
			return;
		}
    }
}

